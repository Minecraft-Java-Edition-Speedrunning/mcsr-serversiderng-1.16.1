package me.voidxwalker.serversiderng.mixin;

import me.voidxwalker.serversiderng.RNGHandler;
import me.voidxwalker.serversiderng.Speedrun;
import net.minecraft.world.gen.GeneratorOptions;
import org.objectweb.asm.Opcodes;
import org.spongepowered.asm.mixin.Final;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.Redirect;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;

import java.util.OptionalLong;

@Mixin(GeneratorOptions.class)
public class GeneratorOptionsMixin {
    @Shadow @Final private long seed;
    @Inject(method = "withHardcore",at = @At("HEAD"))
    public void startRun(boolean hardcore, OptionalLong seed, CallbackInfoReturnable<GeneratorOptions> cir){
        Speedrun.startSpeedrun();
    }
    /**
     * Uses the from {@link RNGHandler#getRngValue(RNGHandler.RNGTypes)} obtained random {@code Long}, that has been generated by the verification server, for the {@link RNGHandler.RNGTypes#WORLD_SEED}.
     * <p>
     * Starts a new {@link Speedrun}.
     * @author Void_X_Walker
     * @see Speedrun#startSpeedrun()
     */
    @Redirect(method = "withHardcore", at = @At(value = "FIELD",target = "Lnet/minecraft/world/gen/GeneratorOptions;seed:J", opcode = Opcodes.GETFIELD))
    private long modifySeedRandom(GeneratorOptions instance) {

        if(Speedrun.inSpeedrun()){
            return Speedrun.currentSpeedrun.getCurrentRNGHandler().getRngValue(RNGHandler.RNGTypes.WORLD_SEED);
        }
        return seed;
    }
}
