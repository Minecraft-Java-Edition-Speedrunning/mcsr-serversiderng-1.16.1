package me.voidxwalker.serversiderng.mixin.rng_verification;

import me.voidxwalker.serversiderng.RNGHandler;
import me.voidxwalker.serversiderng.RNGSession;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityType;
import net.minecraft.entity.LivingEntity;
import net.minecraft.entity.damage.DamageSource;
import net.minecraft.loot.LootTable;
import net.minecraft.loot.context.LootContextTypes;
import net.minecraft.util.Identifier;
import net.minecraft.world.World;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
import org.spongepowered.asm.mixin.injection.callback.LocalCapture;

import java.util.function.Supplier;

@Mixin(LivingEntity.class)
public abstract class LivingEntityMixin extends Entity {
    public LivingEntityMixin(EntityType<?> type, World world) {
        super(type, world);
    }
    /**
     * Uses the from {@link  RNGSession#getRngContext(RNGHandler.RNGTypes)} obtained random {@code Long} obtained random {@code Long}, that has been generated by the {@code Verification-Server}, as a seed for the {@link RNGHandler.RNGTypes#MOB_DROP} RNG.
     * Only mobs killed by the player are affected.
     * @see RNGSession#getRngContext(RNGHandler.RNGTypes)
     * @author Void_X_Walker
     */
    @Inject(
            method = "dropLoot",
            at = @At(
                    value = "INVOKE",
                    target = "Lnet/minecraft/loot/LootTable;generateLoot(Lnet/minecraft/loot/context/LootContext;Ljava/util/function/Consumer;)V",
                    shift = At.Shift.BEFORE
            ),
            cancellable = true,
            locals = LocalCapture.CAPTURE_FAILEXCEPTION
    )
    private void modifyMobRandom(
            DamageSource source,
            boolean causedByPlayer,
            CallbackInfo ci,
            Identifier identifier,
            LootTable lootTable,
            net.minecraft.loot.context.LootContext.Builder builder
    ) {
        RNGSession
            .getRngContext(RNGHandler.RNGTypes.MOB_DROP,this.getType().getTranslationKey())
            .filter((it) -> causedByPlayer)
            .map(Supplier::get)
            .ifPresent((it) -> {
                lootTable.generateLoot(
                    builder.random(it).build(LootContextTypes.ENTITY),
                    this::dropStack
                );
                ci.cancel();
            });
    }
}
