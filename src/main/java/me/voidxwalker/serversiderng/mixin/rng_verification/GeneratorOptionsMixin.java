package me.voidxwalker.serversiderng.mixin.rng_verification;

import me.voidxwalker.serversiderng.RNGHandler;
import me.voidxwalker.serversiderng.RNGSession;
import me.voidxwalker.serversiderng.ServerSideRNG;
import net.minecraft.world.gen.GeneratorOptions;
import org.spongepowered.asm.mixin.Final;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Mutable;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.ModifyArg;
import org.spongepowered.asm.mixin.injection.Redirect;
import org.spongepowered.asm.mixin.injection.Slice;

import java.util.OptionalLong;
import java.util.Random;
import java.util.function.Supplier;

@Mixin(GeneratorOptions.class)
public class GeneratorOptionsMixin {
    @Mutable
    @Shadow @Final private long seed;
    /**
     * Uses the from {@link  ServerSideRNG#getRngContext(RNGHandler.RNGTypes) )} obtained random {@code Long}, that has been generated by the {@code Verification-Server}, for the {@link RNGHandler.RNGTypes#WORLD_SEED}.
     * Modifies the getField instead of just the parameter to ensure that other fabric mods, notably <a href="https://github.com/RedLime/SpeedRunIGT">SpeedRunIGT</a>, can still classify the world as "random seed".
     * @return A {@code Long} generated with a seed obtained by the verification or the vanilla {@code Random} if {@code ServerSideRNG} is not in a session
     * @author Void_X_Walker
     * @see  ServerSideRNG#getRngContext(RNGHandler.RNGTypes)
     */
    @ModifyArg(method = "withHardcore", at = @At(value = "INVOKE",target = "Ljava/util/OptionalLong;orElse(J)J"))
    private long serversiderng_modifySeedRandom(long other) {
        return ServerSideRNG.getRngContext(RNGHandler.RNGTypes.WORLD_SEED)
            .map(Supplier::get)
            .map(Random::new)
            .map((it) -> {
                long l = it.nextLong();
                this.seed = l;
                return l;
            }).orElse(other);
    }

    /**
     * Ensures that the {@link GeneratorOptions} use a {@link net.minecraft.world.gen.chunk.ChunkGenerator} created with the seed modified via {@link GeneratorOptionsMixin#serversiderng_modifySeedRandom(long)}.
     * @author Void_X_Walker
     */
    @Redirect(
            method = "withHardcore",
            at = @At(value = "INVOKE", target = "Ljava/util/OptionalLong;isPresent()Z", ordinal = 0),
            slice = @Slice(
                    from = @At(value = "INVOKE", target = "Ljava/util/OptionalLong;orElse(J)J", shift = At.Shift.AFTER),
                    to = @At(value = "INVOKE", target = "Lnet/minecraft/world/gen/GeneratorOptions;isDebugWorld()Z", shift = At.Shift.BEFORE)
            )
    )
    @SuppressWarnings("OptionalUsedAsFieldOrParameterType")
    private boolean serversiderng_ensureSeedConsistency(OptionalLong instance) {
        return RNGSession.inSession() || instance.isPresent();
    }
    /**
     * Ensures that the {@link GeneratorOptions} use a {@link net.minecraft.world.gen.chunk.ChunkGenerator} created with the seed modified via {@link GeneratorOptionsMixin#serversiderng_modifySeedRandom( long)}.
     * @author Void_X_Walker
     */
    @Redirect(
        method = "withHardcore",
        at = @At(value = "INVOKE", target = "Ljava/util/OptionalLong;getAsLong()J", ordinal = 0),
        slice = @Slice(
            from = @At(value = "INVOKE", target = "Ljava/util/OptionalLong;orElse(J)J", shift = At.Shift.AFTER),
            to = @At(value = "INVOKE", target = "Lnet/minecraft/world/gen/GeneratorOptions;isDebugWorld()Z", shift = At.Shift.BEFORE)
        )
    )
    @SuppressWarnings("OptionalUsedAsFieldOrParameterType")
    private long serversiderng_ensureSeedConsistency2(OptionalLong instance) {
        return instance.orElse(this.seed);
    }
}
