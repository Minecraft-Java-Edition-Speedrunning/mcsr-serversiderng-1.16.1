package me.voidxwalker.serversiderng.mixin.rng_verification;

import me.voidxwalker.serversiderng.RNGHandler;
import me.voidxwalker.serversiderng.RNGSession;
import net.minecraft.world.gen.GeneratorOptions;
import org.spongepowered.asm.mixin.Final;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Mutable;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.Redirect;
import org.spongepowered.asm.mixin.injection.Slice;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;

import java.util.OptionalLong;
import java.util.function.Supplier;

@Mixin(GeneratorOptions.class)
public class GeneratorOptionsMixin {
    @Mutable
    @Shadow @Final private long seed;
    /**
     * Uses the from {@link RNGHandler#getRngValue(RNGHandler.RNGTypes)} obtained random {@code Long}, that has been generated by the {@code Verification-Server}, for the {@link RNGHandler.RNGTypes#WORLD_SEED}.
     * Modifies the getField instead of just the parameter to ensure that other fabric mods, notably <a href="https://github.com/RedLime/SpeedRunIGT">SpeedRunIGT</a>, can still classify the world as "random seed".
     * @author Void_X_Walker
     * @see RNGHandler#getRngValue(RNGHandler.RNGTypes) 
     */
    @Inject(method = "withHardcore", at = @At(value = "HEAD"))
    @SuppressWarnings("OptionalUsedAsFieldOrParameterType")
    private void modifySeedRandom(boolean hardcore, OptionalLong seed, CallbackInfoReturnable<GeneratorOptions> cir) {
        RNGSession.getRngContext(RNGHandler.RNGTypes.WORLD_SEED)
            .map(Supplier::get)
            .ifPresent((it) -> this.seed = it);
    }

    /**
     * Ensures that the {@link GeneratorOptions} use a {@link net.minecraft.world.gen.chunk.ChunkGenerator} created with the seed modified via {@link GeneratorOptionsMixin#modifySeedRandom(boolean, OptionalLong, CallbackInfoReturnable)}.
     * @author Void_X_Walker
     * @see RNGHandler#getRngValue(RNGHandler.RNGTypes)
     */
    @Redirect(
            method = "withHardcore",
            at = @At(value = "INVOKE", target = "Ljava/util/OptionalLong;isPresent()Z", ordinal = 0),
            slice = @Slice(
                    from = @At(value = "INVOKE", target = "Ljava/util/OptionalLong;orElse(J)J", shift = At.Shift.AFTER),
                    to = @At(value = "INVOKE", target = "Lnet/minecraft/world/gen/GeneratorOptions;isDebugWorld()Z", shift = At.Shift.BEFORE)
            )
    )
    @SuppressWarnings("OptionalUsedAsFieldOrParameterType")
    private boolean ensureSeedConsistency(OptionalLong instance) {
        return RNGSession.inSession() || instance.isPresent();
    }
    /**
     * Ensures that the {@link GeneratorOptions} use a {@link net.minecraft.world.gen.chunk.ChunkGenerator} created with the seed modified via {@link GeneratorOptionsMixin#modifySeedRandom(boolean, OptionalLong, CallbackInfoReturnable)}.
     * @author Void_X_Walker
     * @see RNGHandler#getRngValue(RNGHandler.RNGTypes)
     */
    @Redirect(
        method = "withHardcore",
        at = @At(value = "INVOKE", target = "Ljava/util/OptionalLong;getAsLong()J", ordinal = 0),
        slice = @Slice(
            from = @At(value = "INVOKE", target = "Ljava/util/OptionalLong;orElse(J)J", shift = At.Shift.AFTER),
            to = @At(value = "INVOKE", target = "Lnet/minecraft/world/gen/GeneratorOptions;isDebugWorld()Z", shift = At.Shift.BEFORE)
        )
    )
    @SuppressWarnings("OptionalUsedAsFieldOrParameterType")
    private long ensureSeedConsistency2(OptionalLong instance) {
        return instance.orElse(this.seed);
    }
}
